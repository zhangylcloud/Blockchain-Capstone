// define a variable to import the <Verifier> or <renamedVerifier> solidity contract generated by Zokrates
let Verifier = artifacts.require("Verifier");
// - use the contents from proof.json generated from zokrates steps
let proof = require('../../zokrates/code/square/proof.json');

contract("Test Verifier", (accounts) =>{
    let contractInstance;
    beforeEach(async function () {
        contractInstance = await Verifier.new({from: accounts[0]});
    });

    describe('Test verification', () => {
        // Test verification with correct proof
        it('verification with correct proof', async () => {
            let a = proof.proof.a;
            let b = proof.proof.b;
            let c = proof.proof.c;
            let inputs = proof.inputs;
            let result = await contractInstance.verifyTx.call(a, b, c, inputs);
            assert.equal(result, true, "verifyTx should return true with correct proof");
        });

        // Test verification with incorrect proof
        it('verification with incorrect proof', async () => {
            let a = [
                '0x0000000000000000000000000000000000000000000000000000000000000000',
                '0x0000000000000000000000000000000000000000000000000000000000000000',
            ];
            let b = proof.proof.b;
            let c = proof.proof.c;
            let inputs = proof.inputs;
            let result = await contractInstance.verifyTx.call(a, b, c, inputs);
            assert.equal(result, false, "verifyTx should return false with incorrect proof");
        });
    });
});


    

